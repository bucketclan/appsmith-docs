"use strict";(self.webpackChunkappsmith_docs=self.webpackChunkappsmith_docs||[]).push([[8278],{3905:(e,t,o)=>{o.d(t,{Zo:()=>h,kt:()=>g});var a=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},h=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),d=p(o),g=n,c=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return o?a.createElement(c,r(r({ref:t},h),{},{components:o})):a.createElement(c,r({ref:t},h))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,r[1]=l;for(var p=2;p<i;p++)r[p]=o[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,o)}d.displayName="MDXCreateElement"},10164:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=o(87462),n=(o(67294),o(3905));const i={description:"How to add OAuth2 Authorization for Integrating Google Sheets into Appsmith",sidebar_position:8},r="OAuth2 Authorization for Google Sheets",l={unversionedId:"learning-and-resources/how-to-guides/oauth2-authorization-for-google-sheets",id:"learning-and-resources/how-to-guides/oauth2-authorization-for-google-sheets",title:"OAuth2 Authorization for Google Sheets",description:"How to add OAuth2 Authorization for Integrating Google Sheets into Appsmith",source:"@site/docs/learning-and-resources/how-to-guides/oauth2-authorization-for-google-sheets.md",sourceDirName:"learning-and-resources/how-to-guides",slug:"/learning-and-resources/how-to-guides/oauth2-authorization-for-google-sheets",permalink:"/appsmith-docs/learning-and-resources/how-to-guides/oauth2-authorization-for-google-sheets",draft:!1,editUrl:"https://github.com/bucketclan/appsmith-docs/blob/v1.5/website/docs/learning-and-resources/how-to-guides/oauth2-authorization-for-google-sheets.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{description:"How to add OAuth2 Authorization for Integrating Google Sheets into Appsmith",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"How to work with Google Sheets on Appsmith",permalink:"/appsmith-docs/learning-and-resources/how-to-guides/how-to-work-with-google-sheets-on-appsmith"},next:{title:"Whitelist Appsmith on AWS",permalink:"/appsmith-docs/learning-and-resources/how-to-guides/aws-whitelist"}},s={},p=[{value:"<strong>Google Cloud Platform Setup</strong>",id:"google-cloud-platform-setup",level:2},{value:"<strong>Integrating Google Sheets with Appsmith</strong>",id:"integrating-google-sheets-with-appsmith",level:2},{value:"<strong>Writing APIs to Interact with Google Sheets and Building UI</strong>",id:"writing-apis-to-interact-with-google-sheets-and-building-ui",level:2},{value:"Get Data from Google Sheet",id:"get-data-from-google-sheet",level:3},{value:"<strong>Posting Data to Google Sheet from Appsmith</strong>",id:"posting-data-to-google-sheet-from-appsmith",level:3}],h={toc:p};function u(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"oauth2-authorization-for-google-sheets"},"OAuth2 Authorization for Google Sheets"),(0,n.kt)("p",null,"This document describes how to integrate google sheets with Appsmith using REST APIs. By the end of this guide, you will build UI/tools that can communicate with your google sheets. You\u2019ll also need to do some additional setup on the Google Cloud Platform to gather the necessary API keys for the authorisation access. You can follow the below steps if you need help with setting up the keys."),(0,n.kt)("h2",{id:"google-cloud-platform-setup"},(0,n.kt)("strong",{parentName:"h2"},"Google Cloud Platform Setup")),(0,n.kt)("p",null,"Google Cloud Platform allows us to authorise third-party applications to access files in our Google Drive. This essentially involves all your docs, sheets, photos and other files in your drive folder. Below are the steps to create an OAuth application that can be given permission to access your google drive folder."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"If you\u2019re an existing user, you can sign in to ",(0,n.kt)("a",{parentName:"li",href:"https://cloud.google.com/"},"Google Console")," or sign up for a new free account."),(0,n.kt)("li",{parentName:"ol"},"You\u2019ll then be redirected to a console, where you\u2019ll have to create a New Project."),(0,n.kt)("li",{parentName:"ol"},"Now, you\u2019ll have to generate OAuth 2.0 Client IDs; you can do this by navigating to the APIs and Services - Credentials section."),(0,n.kt)("li",{parentName:"ol"},"Next, create a new app under the OAuth 2.0 Client ID section and give it a name."),(0,n.kt)("li",{parentName:"ol"},"You\u2019ll now find two keys, Client ID and Client Secret; you\u2019ll need these authorize appsmith to access your drive."),(0,n.kt)("li",{parentName:"ol"},"Now add the following URIs under Authorised Redirect URIs ",(0,n.kt)("strong",{parentName:"li"},":")," ",(0,n.kt)("a",{parentName:"li",href:"https://app.appsmith.com/api/v1/datasources/authorize"},"https://app.appsmith.com/api/v1/datasources/authorize")),(0,n.kt)("li",{parentName:"ol"},"Lastly, you\u2019ll have to enable API\u2019s to communicate with different services. For example, if you\u2019re integrating google sheets, you\u2019ll have to search for Google Sheets using the top search bar and enable API.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Gathering OAuth Client ID from Google Cloud Platform",src:o(2402).Z,width:"3224",height:"1674"})),(0,n.kt)("h2",{id:"integrating-google-sheets-with-appsmith"},(0,n.kt)("strong",{parentName:"h2"},"Integrating Google Sheets with Appsmith")),(0,n.kt)("p",null,"In this guide, you\u2019ll learn how to build an Appsmith dashboard that performs read, write and delete operations on a Google Sheet. Eventually, you can scale this dashboard to create CRMs or workflows that can communicate with necessary google sheets. Below are the steps to authorise appsmith to access your Google Sheet:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"First, you\u2019ll have to create a new application on ",(0,n.kt)("a",{parentName:"li",href:"https://app.appsmith.com/applications"},"Appsmith"),"."),(0,n.kt)("li",{parentName:"ol"},"A new application opens up an application titled ",(0,n.kt)("inlineCode",{parentName:"li"},"Untitled Application 1"),"; you can rename it by double-clicking on the existing one."),(0,n.kt)("li",{parentName:"ol"},"Next, you\u2019ll have to create a new data-source to interact with Google Sheets: To do this create a new API by clicking on the ",(0,n.kt)("inlineCode",{parentName:"li"},"+")," icon on the left navigation."),(0,n.kt)("li",{parentName:"ol"},"Add a new API and save it as a data source with the following URL: ",(0,n.kt)("a",{parentName:"li",href:"https://sheets.googleapis.com"},"https://sheets.googleapis.com"),"."),(0,n.kt)("li",{parentName:"ol"},"You can also set the name of the data source; in this case, we\u2019ll call it Gsheets."),(0,n.kt)("li",{parentName:"ol"},"Now, navigate to the Gsheets data source and set the following configuration:",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Authentication Type: Oauth 2.0"),(0,n.kt)("li",{parentName:"ol"},"Grant Type: Authorization Code"))),(0,n.kt)("li",{parentName:"ol"},"Add Authentication Token URL: ",(0,n.kt)("a",{parentName:"li",href:"https://oauth2.googleapis.com/token"},"https://oauth2.googleapis.com/token"),"; this token allows users to verify their identity, and in return, receive a unique access token."),(0,n.kt)("li",{parentName:"ol"},"Add the Client ID and Client Secret from Google Cloud Platform"),(0,n.kt)("li",{parentName:"ol"},"Lastly, set the following config:",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Scope: ",(0,n.kt)("a",{parentName:"li",href:"https://www.googleapis.com/auth/spreadsheets"},"https://www.googleapis.com/auth/spreadsheets")),(0,n.kt)("li",{parentName:"ol"},"Authorisation URL ",(0,n.kt)("a",{parentName:"li",href:"https://accounts.google.com/o/oauth2/v2/auth"},"https://accounts.google.com/o/oauth2/v2/auth")),(0,n.kt)("li",{parentName:"ol"},"Add Auth params",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"prompt"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"consent")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"access_type"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"offline")))))),(0,n.kt)("li",{parentName:"ol"},"Save and Authorize the first time around!")),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The Scope in OAuth 2.0 helps us to limit an application's access to a user's account, while the Authorization URL requests authorization from the user.")),(0,n.kt)("h2",{id:"writing-apis-to-interact-with-google-sheets-and-building-ui"},(0,n.kt)("strong",{parentName:"h2"},"Writing APIs to Interact with Google Sheets and Building UI")),(0,n.kt)("p",null,"The authorization part is now complete, now let\u2019s write some APIs to perform some operations to access and manipulate the Google sheets."),(0,n.kt)("h3",{id:"get-data-from-google-sheet"},"Get Data from Google Sheet"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Now go to the GSheets data source and create a new API"),(0,n.kt)("li",{parentName:"ol"},"Rename it to getSheetData"),(0,n.kt)("li",{parentName:"ol"},"Now add the URL of the API and set the request type as ",(0,n.kt)("inlineCode",{parentName:"li"},"GET"),":")),(0,n.kt)("p",null,"First, let\u2019s write a getSheetData API to show all the data in the sheet. Follow the below steps:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"https://sheets.googleapis.com/v4/spreadsheets/<spreadsheet-id>/values/Sheet1\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Make sure the URL you\u2019re requesting is from the data source."),(0,n.kt)("li",{parentName:"ul"},"You can find the spreadsheet-id on the Google Sheet URL, for example, say your Google Sheet URL is:")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"https://docs.google.com/spreadsheets/d/1H0fbiVzi0r-WbgPZvc2YwYmiICnu6xW6SJY4DlDu0/edit#gid=0")),(0,n.kt)("p",null,"The ID will be : ",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"em"},"1H0fbiVzi0r-WbgPZvc2YwYmiICnu6xW6SJY4DlDu0"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Now hit ",(0,n.kt)("strong",{parentName:"li"},"Run")," on the top right, you\u2019ll see the response in the response body below.")),(0,n.kt)("p",null,"Next, you can use this response and render it onto a table widget on Appsmith. Drag and drop a new table widget onto canvas by navigating to Widgets Pane."),(0,n.kt)("p",null,"Open the Table Settings and paste the following JS code in the Table Data property:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"{{ getSheetData.data.values.map((item, index) => ({...item, id: index})) }}\n")),(0,n.kt)("p",null,"With this, you\u2019ll be able to see all the data from Google Sheet showing up in the table widget on the Appsmith dashboard. Also, the logic used here is a straightforward map function on the API using JavaScript."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"One powerful feature of Appsmith is the ability to write JS anywhere to access and manipulate things within the moustache syntax.")),(0,n.kt)("h3",{id:"posting-data-to-google-sheet-from-appsmith"},(0,n.kt)("strong",{parentName:"h3"},"Posting Data to Google Sheet from Appsmith")),(0,n.kt)("p",null,"Let\u2019s add a new feature where you can add new rows to Google sheet. For this, let\u2019s create a new Modal widget and add some input and text widgets to create a form with the necessary fields. Here\u2019s a screenshot of the how the fields look like:"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://lh6.googleusercontent.com/ZpTNggfMB1w_MNz9JPEy4llmyrLZ9QvWGHlhOh2KsqdedTBVBWuPLzgUKoGRl2xrSscniWehfAlXkrjUmFrwyl-f3cMk4tydgT4L-pffs2elwegJtnuICOjrHpQ349fgq-ngt6Wx",alt:"Creating a Form in a Modal on Appsmith"})),(0,n.kt)("p",null,"Following are the fields and widgets we\u2019ve used to create the above form:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"OrderData field: Input Widget (named as orderDataInput)"),(0,n.kt)("li",{parentName:"ul"},"Region Field: Dropdown Widget (named as regionInput)"),(0,n.kt)("li",{parentName:"ul"},"Rep Field: Input Widget (named repInput)"),(0,n.kt)("li",{parentName:"ul"},"Units Field: Input Widget with Number (named as unitsInput)"),(0,n.kt)("li",{parentName:"ul"},"Total Field: Input Widget with Number (named as totalInput)")),(0,n.kt)("p",null,"Awesome! Next, let\u2019s write an API to post values from the above input widgets to google sheets."),(0,n.kt)("p",null,"For this, you\u2019ll have to create a new API named ",(0,n.kt)("inlineCode",{parentName:"p"},"postNewEntry")," and set the request method to post. Inside the URL, select the GSheets data source and use the following endpoint:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"https://sheets.googleapis.com/v4/spreadsheets/<sheet-id>/values/Sheet1:append?valueInputOption=USER_ENTERED&includeValuesInResponse=true\n")),(0,n.kt)("p",null,"Now, you\u2019ll have to pass the values that are being sent from the modal to this API, hence update the body parameter with the following JSON:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "range": "Sheet1",\n  "majorDimension": "ROWS",\n  "values": [\n    [\n      "{{orderDataInput.text}}",\n      "{{regionInput.selectedOptionValue}}",\n      "{{repInput.text}}",\n      "{{unitsInput.text}}",\n      "{{totalInput.text}}"\n    ]\n  ]\n}\n')),(0,n.kt)("p",null,"Here, you\u2019ve used the names of your widgets to reference the input forms in the Modal widget and are posting them through this endpoint."),(0,n.kt)("p",null,"Next, you\u2019ll have to set the onclick property to the ",(0,n.kt)("strong",{parentName:"p"},"Submit Entry")," button on the modal. To do this, open the buttons property pane, select onclick and choose the Call an API option. You should see the available APIs on your page. Now select the ",(0,n.kt)("inlineCode",{parentName:"p"},"postNewEntry")," API. To update the table with new entries, you can set the onsuccess property to call an API and use the getSheetData API. Below is a screenshot of the buttons property pane:"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://lh5.googleusercontent.com/DIFB_MdK0ccGrPHxE7ZihO_rUB7C1-W-8WafT3B95s6JUDsiY4ruOEL-ulkjGgaKu2cxhBXjbRlxGru8YUN6VnFGqZDJnaX5a4rdykCpsqawUXGR2_Y8nZS5GtV4pSZLqZHTErHR",alt:"Configuring Button Properly and Setting Properties"})),(0,n.kt)("p",null,"With this, you can POST new entries to your google sheet from Appsmith Dashboard with customised UI! Similarly, you could have a new Delete API to delete entries on google sheet from the Appsmith dashboard."))}u.isMDXComponent=!0},2402:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/image_(9)-30a7c806772f5229df2ac0c69118d142.png"}}]);