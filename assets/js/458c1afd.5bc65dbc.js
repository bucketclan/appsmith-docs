"use strict";(self.webpackChunkappsmith_docs=self.webpackChunkappsmith_docs||[]).push([[109],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||i;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},51488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const i={sidebar_position:5},r="JSON Web Tokens (JWT)",s={unversionedId:"getting-started/setup/instance-configuration/authentication/json-web-tokens-jwt",id:"getting-started/setup/instance-configuration/authentication/json-web-tokens-jwt",title:"JSON Web Tokens (JWT)",description:"JSON Web Token(JWT) is an open standard (RFC 7519) for securely transmitting information between parties in the form of a JSON object.",source:"@site/docs/getting-started/setup/instance-configuration/authentication/json-web-tokens-jwt.md",sourceDirName:"getting-started/setup/instance-configuration/authentication",slug:"/getting-started/setup/instance-configuration/authentication/json-web-tokens-jwt",permalink:"/appsmith-docs/getting-started/setup/instance-configuration/authentication/json-web-tokens-jwt",draft:!1,editUrl:"https://github.com/bucketclan/appsmith-docs/blob/v1.5/website/docs/getting-started/setup/instance-configuration/authentication/json-web-tokens-jwt.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Ping Identity",permalink:"/appsmith-docs/getting-started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity"},next:{title:"Email",permalink:"/appsmith-docs/getting-started/setup/instance-configuration/email/"}},p={},l=[{value:"When to Use JSON Web Tokens?",id:"when-to-use-json-web-tokens",level:2},{value:"Authentication",id:"authentication",level:3},{value:"Information Exchange",id:"information-exchange",level:3},{value:"How Does JSON Web Token Work?",id:"how-does-json-web-token-work",level:2},{value:"JSON Web Token Structure",id:"json-web-token-structure",level:2},{value:"Header",id:"header",level:3},{value:"Payload",id:"payload",level:3},{value:"Public",id:"public",level:4},{value:"Private",id:"private",level:4},{value:"Registered",id:"registered",level:4},{value:"Signature",id:"signature",level:4},{value:"Why use JSON Web Tokens?",id:"why-use-json-web-tokens",level:2},{value:"How to Use JSON Web Tokens in Appsmith?",id:"how-to-use-json-web-tokens-in-appsmith",level:2},{value:"Types of Token",id:"types-of-token",level:3},{value:"ID Token",id:"id-token",level:4},{value:"Access Token",id:"access-token",level:4}],c={toc:l};function u(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"json-web-tokens-jwt"},"JSON Web Tokens (JWT)"),(0,o.kt)("p",null,"JSON Web Token(JWT) is an open standard (",(0,o.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc7519"},"RFC 7519"),") for securely transmitting information between parties in the form of a JSON object."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"JSON Web Tokens")," (JWT) can be accessed as part of ",(0,o.kt)("a",{parentName:"p",href:"openid-connect-oidc/"},"OpenID Connect (OIDC),")," available ",(0,o.kt)("strong",{parentName:"p"},"only")," in the ",(0,o.kt)("a",{parentName:"p",href:"https://www.appsmith.com/pricing"},(0,o.kt)("strong",{parentName:"a"},"enterprise edition"))," for ",(0,o.kt)("strong",{parentName:"p"},"self-hosted instances"),".")),(0,o.kt)("h2",{id:"when-to-use-json-web-tokens"},"When to Use JSON Web Tokens?"),(0,o.kt)("p",null,"Following are some common scenarios where JSON Web Tokens are used:"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you are aware of JSON Web Tokens, move directly to ",(0,o.kt)("a",{parentName:"p",href:"/appsmith-docs/getting-started/setup/instance-configuration/authentication/json-web-tokens-jwt#how-to-use-json-web-tokens-in-appsmith"},"How to Use JSON Web Tokens in Appsmith?"),".")),(0,o.kt)("h3",{id:"authentication"},"Authentication"),(0,o.kt)("p",null,"For an authenticated user, whenever a user requests to access resources or services, or routes, the application passes the information in the form of an access token that follows a JWT format. Single Sign-On (SSO) commonly uses JWTs to communicate with different systems residing on similar or other domains."),(0,o.kt)("h3",{id:"information-exchange"},"Information Exchange"),(0,o.kt)("p",null,"JSON Web Tokens are a secure way of transmitting information between different applications. JWTs can also be signed. Tokens can have a timestamp associated with them, and once the timestamp is expired, you can block the information exchange for the expired token. You can also verify that the content of the token has not been tampered with. For example, using public/private keypairs, you can ensure that the sender is an authorized sender. This provides an additional layer of security for data or information exchange."),(0,o.kt)("h2",{id:"how-does-json-web-token-work"},"How Does JSON Web Token Work?"),(0,o.kt)("p",null,"For instance, you are authenticating a user. Your SSO Provider shares a JSON Web Token(JWT) on the successful authentication."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"As a best practice, you should only store the token for the time it is needed.")),(0,o.kt)("p",null,"Whenever a user requests access to a resource, the user agent should send the JWT, usually in the Authorization header using Bearer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Authorization: Bearer <followed by the token value>\n")),(0,o.kt)("p",null,"The server\u2019s validation mechanism will verify the token in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," header and grant access to the resources or allow the user to perform an action."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Sending a token as a part of the Authorization header eliminates the Cross-Origin Resource Sharing(CORS) usually faced while sharing through cookies.")),(0,o.kt)("h2",{id:"json-web-token-structure"},"JSON Web Token Structure"),(0,o.kt)("p",null,"A JSON Web Token has three main parts separated with a dot(.) - Header, Payload, and Signature."),(0,o.kt)("p",null,"For example, your header is HEADER1, Payload is PAYLOAD1, and Signature is SIGNATURE1, then the JWT structure will be:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"HEADER1"),(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},".")),(0,o.kt)("inlineCode",{parentName:"p"},"PAYLOAD1"),(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},".")),(0,o.kt)("inlineCode",{parentName:"p"},"SIGNATURE1")),(0,o.kt)("h3",{id:"header"},"Header"),(0,o.kt)("p",null,"A JWT header stores information about the type of token that is JWT and the algorithm used for signing, like SHA256 or RSA, etc."),(0,o.kt)("p",null,"So, the header is represented as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n\n   \u201calg\u201d:\u201dHS256\u201d,\n\n   \u201ctyp\u201d:\u201dJWT\u201d\n\n}\n")),(0,o.kt)("p",null,"Here alg stands for the algorithm used for signing, and typ stands for the token type. The JSON is then encoded as a Base64Url to form the first part of the JSON Web Token, the header."),(0,o.kt)("h3",{id:"payload"},"Payload"),(0,o.kt)("p",null,"The second part of the token, a payload, comprises claims. Claims are information about the entity usually associated with the user and the metadata. There are three types of claims - public, private, and reserved."),(0,o.kt)("h4",{id:"public"},"Public"),(0,o.kt)("p",null,"If you create ",(0,o.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc7519#section-4.2"},"public claims"),", you must define them in IANA JSON Web Token Registry or define them as a URI with a collision-resistant namespace."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The public claims should be validated and agreed upon by Issuer and Consumer.")),(0,o.kt)("h4",{id:"private"},"Private"),(0,o.kt)("p",null,"The parties communicating with each other might want to have some custom claims identified. You can define these custom claims under ",(0,o.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc7519#section-4.3"},"private claims"),". These claims are neither registered nor public."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The public/private claims should not have similar names as reserved claims as it will break the interoperability between the systems exchanging information.")),(0,o.kt)("h4",{id:"registered"},"Registered"),(0,o.kt)("p",null,"A set of pre-defined claims that are not mandatory but are deemed recommended are defined as ",(0,o.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc7519#section-4.1"},"registered claims"),". Such claims provide useful information like expiration time, issuer details, the intended audience, etc."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The claim names are only three characters long to ensure compact JWT.")),(0,o.kt)("p",null,"A sample payload could be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n\n  \u201csub\u201d: \u201cSSOProvider\u201d,\n\n  \u201cemail_verified\u201d: true,\n\n  \u201cupdated_at\u201d: 1646310160264\n\n}\n")),(0,o.kt)("p",null,"The payload is then encoded to form a Base64Url and forms the second part of the token."),(0,o.kt)("h4",{id:"signature"},"Signature"),(0,o.kt)("p",null,"To create a signature, you have to encode the header, payload, a secret, use the algorithm defined in the header and sign it."),(0,o.kt)("p",null,"For example, you are using HMAC SHA-256(HS256) algorithm. Then the generated signature is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' \u200b\u200bHMACSHA256(\n\n  base64UrlEncode(header) + "." +\n\n  base64UrlEncode(payload),\n\n  secret)\n')),(0,o.kt)("p",null,"You can use the signature to validate the sender's authenticity, check if the message is tampered with or not, and can sign with a private key."),(0,o.kt)("p",null,"The signature is encoded as Base64Url and appended to form a complete JSON Web Token."),(0,o.kt)("p",null,"For example, an encoded JWT with header, payload, and signature could be as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9**.**eyJzdWIiOiJTU09Qcm92aWRlciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJ1cGRhdGVkX2F0IjoxNjQ2MzEwMTYwMjY0fQ**.**qUwYZqYbtfCjhODEEF9M6B3JFN4WtUSg37MixYVN1h0\n")),(0,o.kt)("p",null,"You can see that the three parts of the JWT are separated by a dot(.)."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can use the JWT Debugger to encode, decode, or verify the generated JWTs.")),(0,o.kt)("h2",{id:"why-use-json-web-tokens"},"Why use JSON Web Tokens?"),(0,o.kt)("p",null,"The key benefits of using a JWT are that it is more compact and thus smaller in size. It is secured and can use a shared secret between an issuer and a consumer. It uses JSON format; almost every programming language has a JSON parser, so you don\u2019t have to reinvent the wheel."),(0,o.kt)("h2",{id:"how-to-use-json-web-tokens-in-appsmith"},"How to Use JSON Web Tokens in Appsmith?"),(0,o.kt)("p",null,"Let\u2019s take an example. You have integrated your Single Sign On(SSO) provider with Appsmith using ",(0,o.kt)("a",{parentName:"p",href:"openid-connect-oidc/"},(0,o.kt)("em",{parentName:"a"},"OpenID Connect")),". You are using Appsmith to log in and your SSO provider to authenticate the request."),(0,o.kt)("p",null,"Let\u2019s take a closer look at how this interaction happens from Appsmith."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Interaction between Appsmith and SSO Provider",src:n(55266).Z,width:"1570",height:"1084"})),(0,o.kt)("p",null,"In the above diagram, you can see that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A user requests for login using Appsmith."),(0,o.kt)("li",{parentName:"ul"},"Behind the scenes, Appsmith is integrated with the SSO provider."),(0,o.kt)("li",{parentName:"ul"},"SSO Provider authorizes the request."),(0,o.kt)("li",{parentName:"ul"},"The SSO provider generates a token for authenticated users and shares them with Appsmith."),(0,o.kt)("li",{parentName:"ul"},"Appsmith has the token accessible on the platform. You can pass it on in your APIs to provide access to the resources or perform desired operations.")),(0,o.kt)("h3",{id:"types-of-token"},"Types of Token"),(0,o.kt)("p",null,"Appsmith provides two types of JSON Web Tokens that your application can integrate with: ID Token and Access Token."),(0,o.kt)("h4",{id:"id-token"},"ID Token"),(0,o.kt)("p",null,"An ID token is a signed assurance of a user\u2019s identity and contains basic information like the name, picture, email address, etc. When a user logs in successfully, an ID token is shared as per the Open ID Connect (OIDC) specification."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"How to read ID token on Appsmith?")),(0,o.kt)("p",null,"Once the SSO provider successfully authenticates a user, the ID token is available on the Appsmith platform."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Appsmith exposes the ",(0,o.kt)("inlineCode",{parentName:"p"},"idToken")," parameter on the client-side. It thus is available to be embedded in any operation that you would like to perform either in JavaScript functions, APIs, or queries.")),(0,o.kt)("p",null,"You can read the value of an id token in your APIs/Queries by using a mustache sign ","{","{","}","}."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{{appsmith.user.idToken}}\n")),(0,o.kt)("h4",{id:"access-token"},"Access Token"),(0,o.kt)("p",null,"An access token is an object that stores information about an entity in the form of claims. When you want to use token-based authentication, an access token comes in handy. Access tokens are self-contained. You don\u2019t have to call a server to validate a token."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"How to read Access token on Appsmith?")),(0,o.kt)("p",null,"After successful user authentication through an SSO Provider, you can use the access tokens on Appsmith. The access token is available as an environment variable."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The environment variable is not accessible on the client-side as per security norms.")),(0,o.kt)("p",null,"The environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"APPSMITH_USER_OAUTH2_ACCESS_TOKEN")," stores access token. You can read the value of the access token by using it in between the angular braces",(0,o.kt)("inlineCode",{parentName:"p"},"<<>>.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<<APPSMITH_USER_OAUTH2_ACCESS_TOKEN >>")),(0,o.kt)("p",null,"With the JSON Web Tokens available on Appsmith, you can securely exchange data or information between Appsmith and your apps or APIs."))}u.isMDXComponent=!0},55266:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Appsmith-SSO-Provider-JWT_Integration-f1cda731dc7af4f57e8d5017a83ec802.png"}}]);