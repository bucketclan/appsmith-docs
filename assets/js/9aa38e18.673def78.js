"use strict";(self.webpackChunkappsmith_docs=self.webpackChunkappsmith_docs||[]).push([[4517],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),s=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(a),m=n,f=u["".concat(d,".").concat(m)]||u[m]||l[m]||i;return a?r.createElement(f,o(o({ref:t},p),{},{components:a})):r.createElement(f,o({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9395:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=a(87462),n=(a(67294),a(3905));const i={},o="Capture Form Data",c={unversionedId:"core-concepts/data-access-and-binding/capturing-data-write/capture-form-data",id:"core-concepts/data-access-and-binding/capturing-data-write/capture-form-data",title:"Capture Form Data",description:"The Form widget is a special type of container used to build validated forms. Multiple widgets can be dragged inside the form widget to capture data. The form widget comes with a form button pre-configured.",source:"@site/docs/core-concepts/data-access-and-binding/capturing-data-write/capture-form-data.md",sourceDirName:"core-concepts/data-access-and-binding/capturing-data-write",slug:"/core-concepts/data-access-and-binding/capturing-data-write/capture-form-data",permalink:"/core-concepts/data-access-and-binding/capturing-data-write/capture-form-data",draft:!1,editUrl:"https://github.com/bucketclan/appsmith-docs/blob/v1.5/website/docs/core-concepts/data-access-and-binding/capturing-data-write/capture-form-data.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Capturing Data (Write)",permalink:"/core-concepts/data-access-and-binding/capturing-data-write/"},next:{title:"Writing Code",permalink:"/core-concepts/writing-code/"}},d={},s=[{value:"Submitting Form Data",id:"submitting-form-data",level:2},{value:"Displaying Submitted Data",id:"displaying-submitted-data",level:2},{value:"Posting URL Encoded Form Data",id:"posting-url-encoded-form-data",level:2}],p={toc:s};function l(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"capture-form-data"},"Capture Form Data"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"/reference/widgets/form"},"Form widget")," is a special type of container used to build validated forms. Multiple widgets can be dragged inside the form widget to capture data. The form widget comes with a form button pre-configured."),(0,n.kt)("p",null,"The form button is disabled if"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any of the ",(0,n.kt)("strong",{parentName:"li"},"required fields")," inside the form are not filled"),(0,n.kt)("li",{parentName:"ul"},"The form contains an input whose value does not match the regex configured")),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(69200).Z,width:"572",height:"565"})),(0,n.kt)("h2",{id:"submitting-form-data"},"Submitting Form Data"),(0,n.kt)("p",null,"Form data can be submitted using a PUT / POST API or an Insert / Update Query. To submit form data,"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Bind the onClick of the form button to call the API / Query"),(0,n.kt)("li",{parentName:"ol"},"Configure onSuccess to Display a success message"),(0,n.kt)("li",{parentName:"ol"},"Configure the API / Query to read the inputs from the form widgets using Javascript.")),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(2180).Z,width:"1324",height:"799"})),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"Widgets inside a form are automatically reset to their default values when the Form Button onClick succeeds. This can be disabled in the button properties")),(0,n.kt)("h2",{id:"displaying-submitted-data"},"Displaying Submitted Data"),(0,n.kt)("p",null,"Once the API / Query updates the data, the widgets on the screen need to be updated with new data as well. The best way to achieve this is to simply re-fetch the data from the API / Query rather than trying to append the data to the existing data set. This can be done in the onSuccess of the API / Query."),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(10094).Z,width:"1195",height:"805"})),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The Property Pane UI supports a single onSuccess Callback but multiple callbacks and conditions can be configured by clicking the JS button next to the property. Learn more about ",(0,n.kt)("a",{parentName:"p",href:"/core-concepts/writing-code/workflows"},"Creating Workflows"))),(0,n.kt)("h2",{id:"posting-url-encoded-form-data"},"Posting URL Encoded Form Data"),(0,n.kt)("p",null,"The encoding type can be selected via the ",(0,n.kt)("strong",{parentName:"p"},"Body")," dropdown on the API editor. Selecting the value ",(0,n.kt)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded")," will auto encoded the value sent in the body field."))}l.isMDXComponent=!0},69200:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/form_(1)-2be50d9a753af50fe14110da9a542fef.gif"},2180:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/form_query_(1)-ab4e140173ba96218fe061ba6a55dc6b.gif"},10094:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/refetch_data-d62845a0fb7bc0717c5f332bc829bfaa.gif"}}]);